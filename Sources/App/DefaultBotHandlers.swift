//
//  DefaultBotHandlers.swift
//  
//
//  Created by Arman Manukyan on 06.06.22.
//

import Foundation
import Vapor
import telegram_vapor_bot

final class DefaultBotHandlers {
    
    static func addHandlers(app: Vapor.Application, bot: TGBotPrtcl) {
        defaultHandler(app: app, bot: bot)
        commandStartHandler(app: app, bot: bot)
        commandSiteHandler(app: app, bot: bot)
        commanCoursesHandler(app: app, bot: bot)
        commanFAQHandler(app: app, bot: bot)
        commandPMHandler(app: app, bot: bot)
        commandRegisterPMHandler(app: app, bot: bot)
        commandiOSHandler(app: app, bot: bot)
        commandRegisteriOSHandler(app: app, bot: bot)
        commandQAHandler(app: app, bot: bot)
        commandFAQ1Handler(app: app, bot: bot)
        commandFAQ2Handler(app: app, bot: bot)
        commandFAQ3Handler(app: app, bot: bot)
        commandPaymentHandler(app: app, bot: bot)
        imageHandler(app: app, bot: bot)
        paymentHandler(app: app, bot: bot)
//        FAQHandler(app: app, bot: bot)
    }
    
    // MARK: - Default
    
    private static func imageHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGMessageHandler(filters: (.all)) { update, bot in
            guard let userId = update.message?.from?.id else { fatalError("user id not found") }
            if let mediaID = update.message?.photo?.last?.fileId {
                try? bot.getFile(params: TGGetFileParams(fileId: mediaID)).whenSuccess({ file in
                    guard let filePath = file.filePath else { return }
                    let url = "https://api.telegram.org/file/bot\("5525210799:AAHV9yk-6uqBns7iYAFz2t2t63iYkmw-Isg")/\(filePath)"
                    //                    try? update.message?.reply(text: url, bot: bot)
                })
                
                guard let messageID = update.message?.messageId else {fatalError("message id not found")}
                let params: TGForwardMessageParams = .init(chatId: .chat(1339367008),
                                                           fromChatId: .chat(userId),
                                                           messageId: messageID)
                let messageParams: TGSendMessageParams = .init(chatId: .chat(update.message!.chat.id),
                                                               text: """
                                                                    üîÑ’Å’•÷Ä ’æ’≥’°÷Ä’∏÷Ç’¥’® ’Ω’ø’∏÷Ç’£’æ’∏÷Ç’¥ ’ß÷â ’Ñ’•÷Ä ’¥’°’Ω’∂’°’£’•’ø’∂’•÷Ä’® ’∑’∏÷Ç’ø’∏’æ ’Ø’Ø’°’∫’æ’•’∂ ’Å’•’¶ ’∞’•’ø÷â
                                                                    
                                                                    ‚òéÔ∏è’Ä’°÷Ä÷Å’•÷Ä’´ ’§’•’∫÷Ñ’∏÷Ç’¥ ’¶’°’∂’£’°’∞’°÷Ä’•÷Ñ - 012420042.
                                                                    """)
                try bot.forwardMessage(params: params)
                try bot.sendMessage(params: messageParams)
            }
        }
        
        bot.connection.dispatcher.add(handler)
    }
    
    /// add handler for all messages unless this commands...
    private static func defaultHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGMessageHandler(filters: (.all &&
                                                 !.command.names(["/About"]) &&
                                                 !.command.names(["/Courses"]) &&
                                                 !.command.names(["/FAQ"]) &&
                                                 !.command.names(["/Payment"]) &&
                                                 !.command.names(["/start"]) &&
                                                 !.command.names(["/QA"]) &&
                                                 !.command.names(["/register_for_QA"]) &&
                                                 !.command.names(["/PM"]) &&
                                                 !.command.names(["/register_for_PM"]) &&
                                                 !.command.names(["/iOS"]) &&
                                                 !.command.names(["/register_for_iOS"]) &&
                                                 !.command.names(["/1"]) &&
                                                 !.command.names(["/2"]) &&
                                                 !.command.names(["/3"]) &&
                                                 !.command.names(["/4"]) &&
                                                 !.command.names(["/5"]) &&
                                                 !.photo
                                                )) { update, bot in
            let params: TGSendMessageParams = .init(chatId: .chat(update.message!.chat.id), text: "Please select from menu")
            try bot.sendMessage(params: params)
        }
        
        bot.connection.dispatcher.add(handler)
    }
    
    private static func paymentHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGMessageHandler(filters: .command.names(["/’é’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä"])) { update, bot in
            let params: TGSendMessageParams = .init(chatId: .chat(update.message!.chat.id), text: """
                                                    ü§ñ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’æ’≥’°÷Ä’∏÷Ç’¥’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç÷Å ’∞’•’ø’∏ ’Å’•÷Ä ’æ’≥’°÷Ä’¥’°’∂ ’Ø’ø÷Ä’∏’∂’® ’∂’Ø’°÷Ä’•’¨ ÷á ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’°’µ’Ω ’π’°’©-’¢’∏’ø’∏÷Ç’¥
                                                
                                                üí≥’Ä’°’∑’æ’•’∞’°’¥’°÷Ä - 2052822170041001
                                                
                                                ¬ÆÔ∏è‘∏’∂’Ø’•÷Ä’∏÷Ç’©’µ’°’∂ ‘±’∂’æ’°’∂’∏÷Ç’¥` ¬´‘π’•÷Ñ ‘∑’§’∏÷Ç÷Ñ’•’µ’∑’∂¬ª ’ç’ä‘∏
                                                
                                                üè¶‘≤’°’∂’Ø - ‘ª’∂’•’Ø’∏’¢’°’∂’Ø
                                                """)
            try bot.sendMessage(params: params)
        }
        
        bot.connection.dispatcher.add(handler)
    }
    
    private static func FAQHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGMessageHandler(name: "’Ä’°’≥’°’≠ ’ø÷Ä’æ’∏’≤ ’∞’°÷Ä÷Å’•÷Ä") { update, bot in
            guard let userId = update.message?.from?.id else { fatalError("user id not found") }
            
            let keyboard = [
                [TGKeyboardButton(text: "/1 ‘µ’Ω ’π’∏÷Ç’∂’•’¥ ’Æ÷Ä’°’£÷Ä’°’æ’∏÷Ä’¥’°’∂ ’£’´’ø’•’¨’´÷Ñ’∂’•÷Ä÷â ‘±÷Ä’§’µ’∏’û÷Ñ ’Ø’°÷Ä’∏’≤ ’•’¥ ’Ω’∏’æ’∏÷Ä’•’¨ Tech42-’∏÷Ç’¥÷â")],
                [TGKeyboardButton(text: "/2 ’à’û÷Ä ’Æ÷Ä’°’£÷Ä’°’æ’∏÷Ä’¥’°’∂ ’¨’•’¶’∏÷Ç’∂ ’≠’∏÷Ä’∞’∏÷Ç÷Ä’§ ’Ø’ø’°÷Ñ ’Ω’∏’æ’∏÷Ä’•’¨ ’Ω’Ø’Ω’∂’°’Ø’∂’•÷Ä’´ ’∞’°’¥’°÷Ä÷â")],
                [TGKeyboardButton(text: "/3 ‘±÷Ä’§’µ’∏’û÷Ñ ’§’°’Ω’®’∂’©’°÷Å’∂’•÷Ä’´ ’°’æ’°÷Ä’ø’´’∂ ’°’∫’°’∞’∏’æ’∏÷Ç’¥ ’•÷Ñ ’°’∑’≠’°’ø’°’∂÷Ñ’∏’æ÷â")],
                [TGKeyboardButton(text: "/4 ’à÷Ä÷Ñ’°’û’∂ ’ß ’Ø’°’¶’¥’∏÷Ç’¥ ’§’°’Ω’®’∂’©’°÷Å’´ ’°÷Ä’™’•÷Ñ’® ÷á ’ø÷á’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’®÷â")],
                [TGKeyboardButton(text: "/5 ‘±÷Ä’§’µ’∏’û÷Ñ ’Ω’•÷É’°’Ø’°’∂ ’∞’°’¥’°’Ø’°÷Ä’£’π’´ ’°’º’Ø’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’® ’∫’°÷Ä’ø’°’§’´÷Ä ’ß÷â")],
                [TGKeyboardButton(text: "/6 ‘±’∂’∞’°’ø’°’Ø’°’∂ ’∫’°÷Ä’°’∫’¥’∏÷Ç’∂÷Ñ’∂’•÷Ä ’∏÷Ç’∂’•’û÷Ñ÷â")]
            ]
            
            let replyKeyboardMarkup = TGReplyKeyboardMarkup(keyboard: keyboard, resizeKeyboard: true, oneTimeKeyboard: false, inputFieldPlaceholder: "Type /start to go back", selective: false)
            
            let params: TGSendMessageParams = .init(chatId: .chat(userId),
                                                    text: "Please select from menu",
                                                    replyMarkup: .replyKeyboardMarkup(replyKeyboardMarkup))
            
            try bot.sendMessage(params: params)
        }
        
        bot.connection.dispatcher.add(handler)
    }
    
    // MARK: - Start
    
    /// add handler for command "/show_buttons" - show message with buttons
    private static func commandStartHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/start"]) { update, bot in
            guard let userId = update.message?.from?.id
            else { fatalError("user id not found") }
            
            let keyboard = [
                [TGKeyboardButton(text: "‘≥’¨’≠’°’æ’∏÷Ä üè†")],
                [TGKeyboardButton(text: "‘¥’°’Ω’®’∂’©’°÷Å’∂’•÷Ä üìö")],
                [TGKeyboardButton(text: "’Ä’°’≥’°’≠ ’ø÷Ä’æ’∏’≤ ’∞’°÷Ä÷Å’•÷Ä‚ùî")],
                [TGKeyboardButton(text: "’é’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä üíµ")]
            ]
            
            let replyKeyboardMarkup = TGReplyKeyboardMarkup(keyboard: keyboard, resizeKeyboard: true, oneTimeKeyboard: false, inputFieldPlaceholder: "Type something like /About", selective: false)
            
            let params: TGSendMessageParams = .init(chatId: .chat(userId),
                                                    text: "Please select from menu",
                                                    replyMarkup: .replyKeyboardMarkup(replyKeyboardMarkup))
            
            try bot.sendMessage(params: params)
        }
        
        bot.connection.dispatcher.add(handler)
    }
    
    // MARK: - Site
    
    private static func commandSiteHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/About"]) { update, bot in
            try update.message?.reply(text: """
                                            üß≠Site - http://tech42.am
                                            
                                            ‚òéÔ∏èTelephone - 012420042
                                            
                                            ‚úâÔ∏èEmail -  info@tech42.am
                                            
                                            üìçAddress - ‘≤’°’≤÷Ä’°’¥’µ’°’∂ 21/3
                                            """,
                                      bot: bot)
        }
        bot.connection.dispatcher.add(handler)
    }
    
    private static func commandPaymentHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/Payment"]) { update, bot in
            try update.message?.reply(text: """
                                                ü§ñ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’æ’≥’°÷Ä’∏÷Ç’¥’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç÷Å ’∞’•’ø’∏ ’Å’•÷Ä ’æ’≥’°÷Ä’¥’°’∂ ’Ø’ø÷Ä’∏’∂’® ’∂’Ø’°÷Ä’•’¨ ÷á ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’°’µ’Ω ’π’°’©-’¢’∏’ø’∏÷Ç’¥
                                            
                                            üí≥’Ä’°’∑’æ’•’∞’°’¥’°÷Ä - 2052822170041001
                                            
                                            ¬ÆÔ∏è‘∏’∂’Ø’•÷Ä’∏÷Ç’©’µ’°’∂ ‘±’∂’æ’°’∂’∏÷Ç’¥` ¬´‘π’•÷Ñ ‘∑’§’∏÷Ç÷Ñ’•’µ’∑’∂¬ª ’ç’ä‘∏
                                            
                                            üè¶‘≤’°’∂’Ø - ‘ª’∂’•’Ø’∏’¢’°’∂’Ø
                                            """,
                                      bot: bot)
        }
        bot.connection.dispatcher.add(handler)
    }
    
    
    
    
    // MARK: - Courses
    
    private static func commanCoursesHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/Courses"]) { update, bot in
            guard let userId = update.message?.from?.id else { fatalError("user id not found") }
            
            let keyboard = [
                [TGKeyboardButton(text: "/QA"), TGKeyboardButton(text: "/PM")],
                [TGKeyboardButton(text: "/iOS"), TGKeyboardButton(text: "/Sales")],
                [TGKeyboardButton(text: "/Javascript"), TGKeyboardButton(text: "/C#")],
                [TGKeyboardButton(text: "/Java"), TGKeyboardButton(text: "/UI_UX")],
                [TGKeyboardButton(text: "/Python"), TGKeyboardButton(text: "/Recruitment")]
            ]
            
            
            let replyKeyboardMarkup = TGReplyKeyboardMarkup(keyboard: keyboard, resizeKeyboard: true, oneTimeKeyboard: false, inputFieldPlaceholder: "Type /start to go back", selective: false)
            
            let params: TGSendMessageParams = .init(chatId: .chat(userId),
                                                    text: "Please select from menu",
                                                    replyMarkup: .replyKeyboardMarkup(replyKeyboardMarkup))
            
            try bot.sendMessage(params: params)
        }
        
        bot.connection.dispatcher.add(handler)
    }
    
    
    // MARK: - FAQ
    
    private static func commanFAQHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/FAQ"]) { update, bot in
            guard let userId = update.message?.from?.id else { fatalError("user id not found") }
            
            let keyboard = [
                [TGKeyboardButton(text: "/1 ‘µ’Ω ’π’∏÷Ç’∂’•’¥ ’Æ÷Ä’°’£÷Ä’°’æ’∏÷Ä’¥’°’∂ ’£’´’ø’•’¨’´÷Ñ’∂’•÷Ä÷â ‘±÷Ä’§’µ’∏’û÷Ñ ’Ø’°÷Ä’∏’≤ ’•’¥ ’Ω’∏’æ’∏÷Ä’•’¨ Tech42-’∏÷Ç’¥÷â")],
                [TGKeyboardButton(text: "/2 ’à’û÷Ä ’Æ÷Ä’°’£÷Ä’°’æ’∏÷Ä’¥’°’∂ ’¨’•’¶’∏÷Ç’∂ ’≠’∏÷Ä’∞’∏÷Ç÷Ä’§ ’Ø’ø’°÷Ñ ’Ω’∏’æ’∏÷Ä’•’¨ ’Ω’Ø’Ω’∂’°’Ø’∂’•÷Ä’´ ’∞’°’¥’°÷Ä÷â")],
                [TGKeyboardButton(text: "/3 ‘±÷Ä’§’µ’∏’û÷Ñ ’§’°’Ω’®’∂’©’°÷Å’∂’•÷Ä’´ ’°’æ’°÷Ä’ø’´’∂ ’°’∫’°’∞’∏’æ’∏÷Ç’¥ ’•÷Ñ ’°’∑’≠’°’ø’°’∂÷Ñ’∏’æ÷â")],
                [TGKeyboardButton(text: "/4 ’à÷Ä÷Ñ’°’û’∂ ’ß ’Ø’°’¶’¥’∏÷Ç’¥ ’§’°’Ω’®’∂’©’°÷Å’´ ’°÷Ä’™’•÷Ñ’® ÷á ’ø÷á’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’®÷â")],
                [TGKeyboardButton(text: "/5 ‘±÷Ä’§’µ’∏’û÷Ñ ’Ω’•÷É’°’Ø’°’∂ ’∞’°’¥’°’Ø’°÷Ä’£’π’´ ’°’º’Ø’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’® ’∫’°÷Ä’ø’°’§’´÷Ä ’ß÷â")],
                [TGKeyboardButton(text: "/6 ‘±’∂’∞’°’ø’°’Ø’°’∂ ’∫’°÷Ä’°’∫’¥’∏÷Ç’∂÷Ñ’∂’•÷Ä ’∏÷Ç’∂’•’û÷Ñ÷â")]
            ]
            
            let replyKeyboardMarkup = TGReplyKeyboardMarkup(keyboard: keyboard, resizeKeyboard: true, oneTimeKeyboard: false, inputFieldPlaceholder: "Type /start to go back", selective: false)
            
            let params: TGSendMessageParams = .init(chatId: .chat(userId),
                                                    text: "Please select from menu",
                                                    replyMarkup: .replyKeyboardMarkup(replyKeyboardMarkup))
            
            try bot.sendMessage(params: params)
        }
        
        bot.connection.dispatcher.add(handler)
    }
    
    private static func commandFAQ1Handler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/1"]) { update, bot in
            try update.message?.reply(text: "‘±’µ’∏, ’Ø’°÷Ä’∏’≤ ’•÷Ñ÷â Tech42-’∏÷Ç’¥ ‘¥’°’Ω’®’∂’©’°÷Å’∂’•÷Ä’® ’∂’°’≠’°’ø’•’Ω’æ’°’Æ ’•’∂ ’´’∂’π’∫’•’Ω ’Ω’Ø’Ω’∂’°’Ø’∂’•÷Ä’´ ’∞’°’¥’°÷Ä, ’°’µ’∂’∫’•’Ω ’ß’¨ ’°÷Ä’§’•’∂ ’∏÷Ä’∏’∑’°’Ø’´ ÷É’∏÷Ä’± ’∏÷Ç’∂’•÷Å’∏’≤ ’¥’°’Ω’∂’°’£’•’ø’∂’•÷Ä’´ ’∞’°’¥’°÷Ä÷â ’Ä’°÷Ä’Ø’°’æ’∏÷Ä ’ß ’£÷Ä’°’∂÷Å’æ’•’¨ ’Ω’Ø’Ω’∂’°’Ø’∂’•÷Ä’´ ’∞’°’¥’°÷Ä ’∂’°’≠’°’ø’•’Ω’æ’°’Æ ’§’°’Ω’®’∂’©’°÷Å’∂’•÷Ä’´÷Å ’¥’•’Ø’∏÷Ç’¥÷â",
                                      bot: bot)
        }
        
        bot.connection.dispatcher.add(handler)
    }
    
    private static func commandFAQ2Handler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/2"]) { update, bot in
            try update.message?.reply(text: "‘æ÷Ä’°’£÷Ä’°’æ’∏÷Ä’¥’°’∂ ’¨’•’¶’∏÷Ç’∂’•÷Ä’® ’ø’°÷Ä’¢’•÷Ä ’•’∂ ’¨’´’∂’∏÷Ç’¥, ’∏÷Ä’∏’∂÷Å ’Ø’´÷Ä’°’º’•’¨’´’∏÷Ç’©’µ’∏÷Ç’∂’® ’∂’°’≠’°’ø’•’Ω’æ’°’Æ ’ß ’ø’°÷Ä’°’¢’∂’∏÷Ç’µ’© ’≠’∂’§’´÷Ä’∂’•÷Ä’´ ’¨’∏÷Ç’Æ’¥’°’∂’®÷â ‘±’µ’Ω’∫’´’Ω’∏’æ, ’¥’•’Æ ’∂’∑’°’∂’°’Ø’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’´ ’©’• ’´’∂’π’∏÷Ç’û ’•÷Ñ ÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’Ω’∏’æ’∏÷Ä’•’¨ ’Æ÷Ä’°’£÷Ä’°’æ’∏÷Ä’∏÷Ç’¥ ÷á ’´’∂’π ’•÷Ñ ÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’°’∂’•’¨ ’Å’•÷Ä ’Ω’∏’æ’∏÷Ä’°’Æ’∏’æ: Tech42-’® ’∏÷Ç’∂’´ ’≠’∏÷Ä’∞÷Ä’§’°’ø’æ’∏÷Ç’©’µ’°’∂ ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂, ’∫’°’ø’æ’´÷Ä’•÷Ñ ’≠’∏÷Ä’∞÷Ä’§’°’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’®, ’∏÷Ä’∫’•’Ω’¶’´ ’¥’°’Ω’∂’°’£’ø’•’® ’≥’´’∑’ø ’∏÷Ç’≤’≤’∏÷Ä’§’´ ’Å’•’¶÷â",
                                      bot: bot)
        }
        
        bot.connection.dispatcher.add(handler)
    }
    
    private static func commandFAQ3Handler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/3"]) { update, bot in
            try update.message?.reply(text: "‘º’°’æ’°’£’∏÷Ç’µ’∂ ’∏÷Ç’Ω’°’∂’∏’≤’∂’•÷Ä’´’∂ Tech42-’® ’°’º’°’ª’°÷Ä’Ø’∏÷Ç’¥ ’ß ’´÷Ä’•’∂÷Å ’©’•’Ø’∂’°’Æ’∏÷Ç’©’µ’∏÷Ç’∂’® ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä ’Ø’°’¶’¥’°’Ø’•÷Ä’∫’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’∏÷Ç’¥` ’°’∑’≠’°’ø’°’∂÷Ñ’´ ’°’∂÷Å’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â",
                                      bot: bot)
        }
        
        bot.connection.dispatcher.add(handler)
    }
    // MARK: - QA
    
    private static func commandQAHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/QA"]) { update, bot in
            guard let userId = update.message?.from?.id else { fatalError("user id not found") }
            let buttons: [[TGInlineKeyboardButton]] = [
                [.init(text: "üìùRegister for QA", url: "http://tech42.am/ios-fundamentals.html")]
            ]
            
            
            let keyboard: TGInlineKeyboardMarkup = .init(inlineKeyboard: buttons)
            let params: TGSendMessageParams = .init(chatId: .chat(userId),
                                                    text: """
                                                        ‚è∞Duration - 2 months
                                                        
                                                        üíµCost - 50.000AMD per month
                                                        
                                                        üë©üèª‚ÄçüíªTutor - Lusine Simonyan(from EPAM)
                                                        """,
                                                    replyMarkup: .inlineKeyboardMarkup(keyboard))
            try bot.sendMessage(params: params)
        }
        bot.connection.dispatcher.add(handler)
    }
    
    // MARK: - PM
    
    private static func commandPMHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/PM"]) { update, bot in
            try update.message?.reply(text: """
                                            ‚è∞Duration - 3 months
                                            
                                            üíµCost - 55.000AMD per month
                                            
                                            üìù/register_for_PM
                                            """,
                                      bot: bot)
        }
        bot.connection.dispatcher.add(handler)
    }
    
    private static func commandRegisterPMHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/register_for_PM"]) { update, bot in
            try update.message?.reply(text: "http://tech42.am/itpm-fundamentals.html", bot: bot)
        }
        bot.connection.dispatcher.add(handler)
    }
    
    // MARK: - iOS
    
    private static func commandiOSHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/iOS"]) { update, bot in
            try update.message?.reply(text: """
                                            ‚è∞Duration - 6 months
                                            
                                            üíµCost - 50.000AMD per month
                                            
                                            üìù/register_for_iOS
                                            """,
                                      bot: bot)
        }
        bot.connection.dispatcher.add(handler)
    }
    
    private static func commandRegisteriOSHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/register_for_iOS"]) { update, bot in
            try update.message?.reply(text: "http://tech42.am/ios-fundamentals.html", bot: bot)
        }
        bot.connection.dispatcher.add(handler)
    }
}
